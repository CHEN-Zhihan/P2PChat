#ifndef P2PCHAT_H
#define P2PCHAT_H

#include <stdio.h>
#include <pthread.h>
#include "vector.h"


#define nullptr NULL
#define BUFFER_SIZE 1024

#define SUCCESS ${SUCCESS}
#define JOINED_EXCEPTION ${JOINED_EXCEPTION}
#define UNJOINED_EXCEPTION ${UNJOINED_EXCEPTION}
#define UNNAMED_EXCEPTION ${UNNAMED_EXCEPTION}
#define REMOTE_EXCEPTION ${REMOTE_EXCEPTION}

#define OBSERVE_ADD ${OBSERVE_ADD}
#define OBSERVE_REMOVE ${OBSERVE_REMOVE}
#define OBSERVE_MESSAGE ${OBSERVE_MESSAGE}
#define OBSERVE_ERROR ${OBSERVE_ERROR}
#define OBSERVE_FORWARD ${OBSERVE_FORWARD}
#define OBSERVE_BACKWARD ${OBSERVE_BACKWARD}
#define OBSERVE_LIST ${OBSERVE_LIST}

typedef enum state {
    START_STATE, NAMED_STATE, JOINED_STATE
} state;



struct server_t {
    int local_server_soc;
    char local_server_buffer[BUFFER_SIZE];
    char server_buffer[BUFFER_SIZE];
    int server_soc;
    pthread_t event_thread;
    vector_member members;
};

struct chat_t {
    const char* name;
    pthread_t keep_alive_thread;
    state current_state;
    char* join_msg;
    int port;
    int local_soc;
    char local_buffer[BUFFER_SIZE];
    struct server_t server;
};


int do_user(struct chat_t*, const char*);
int do_join(struct chat_t*, const char*);
int do_send(struct chat_t*, const char*);
void handle_join(struct chat_t*);
vector_str do_list(struct chat_t*);
void do_quit(struct chat_t*);
void setup(struct chat_t*, char*, int, int);


#endif  // P2PCHAT_H
